name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"

jobs:
  # Backend testing and quality checks
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kachi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync

    - name: Run linting
      run: uv run ruff check src/ tests/

    - name: Run formatting check
      run: uv run ruff format --check src/ tests/

    - name: Run type checking
      run: uv run mypy src/kachi

    - name: Run unit tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/kachi_test
        REDIS_URL: redis://localhost:6379/0
      run: uv run pytest tests/test_deriver.py tests/test_rater.py -v

    - name: Run API tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/kachi_test
        REDIS_URL: redis://localhost:6379/0
      run: uv run pytest tests/test_ingest_api.py tests/test_dashboard_api.py -v

    - name: Run integration tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/kachi_test
        REDIS_URL: redis://localhost:6379/0
      run: uv run pytest tests/test_integration.py -v

    - name: Run property-based tests
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/kachi_test
      run: uv run pytest tests/test_property_based.py -v

    - name: Generate coverage report
      env:
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/kachi_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        uv run pytest --cov=kachi --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend testing and building
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/dashboard/yarn.lock

    - name: Install dependencies
      working-directory: frontend/dashboard
      run: yarn install --frozen-lockfile

    - name: Run linting
      working-directory: frontend/dashboard
      run: yarn lint

    - name: Run type checking
      working-directory: frontend/dashboard
      run: yarn type-check

    - name: Run unit tests
      working-directory: frontend/dashboard
      run: yarn test:unit

    - name: Build frontend
      working-directory: frontend/dashboard
      run: yarn build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dashboard/dist/

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync

    - name: Run security scan
      run: |
        uv run bandit -r src/
        uv run safety check

  # Docker build and push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dashboard/dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (example for staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d
