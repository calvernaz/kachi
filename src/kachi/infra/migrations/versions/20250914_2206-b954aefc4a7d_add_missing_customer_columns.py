"""Add missing customer columns

Revision ID: b954aefc4a7d
Revises: 43550edfed70
Create Date: 2025-09-14 22:06:12.975692

"""
from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b954aefc4a7d"
down_revision: str | Sequence[str] | None = "43550edfed70"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "outcome_verifications",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("workflow_run_id", sa.Uuid(), nullable=False),
        sa.Column("outcome_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "external_system", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("external_ref", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("verified_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("reversal_reason", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("holdback_until", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("settlement_days", sa.Integer(), nullable=False),
        sa.Column(
            "outcome_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["workflow_run_id"],
            ["workflow_runs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_outcome_verifications_workflow_run_id"),
        "outcome_verifications",
        ["workflow_run_id"],
        unique=False,
    )
    op.alter_column(
        "audit_log",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=None,
        nullable=True,
    )
    op.alter_column(
        "cost_records",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.add_column("customers", sa.Column("active", sa.Boolean(), nullable=False))
    op.add_column(
        "customers",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
    )
    op.add_column(
        "customers",
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
    )
    op.alter_column(
        "customers",
        "currency",
        existing_type=sa.VARCHAR(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "customers",
        "status",
        existing_type=sa.VARCHAR(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_constraint(
        op.f("customers_lago_customer_id_key"), "customers", type_="unique"
    )
    op.create_index(op.f("ix_customers_active"), "customers", ["active"], unique=False)
    op.alter_column(
        "meter_readings",
        "window_start",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "meter_readings",
        "window_end",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "meter_readings",
        "src_event_ids",
        existing_type=postgresql.ARRAY(sa.BIGINT()),
        server_default=None,
        nullable=True,
    )
    op.add_column(
        "rated_usage",
        sa.Column("lago_pushed_at", postgresql.TIMESTAMP(timezone=True), nullable=True),
    )
    op.alter_column(
        "rated_usage", "period_start", existing_type=sa.TEXT(), nullable=True
    )
    op.alter_column("rated_usage", "period_end", existing_type=sa.TEXT(), nullable=True)
    op.alter_column(
        "rated_usage",
        "items_json",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "raw_events",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "raw_events",
        "payload_json",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "workflow_definitions",
        "definition_schema",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "workflow_definitions",
        "active",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "workflow_runs",
        "started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "workflow_runs",
        "started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "workflow_definitions",
        "active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_nullable=False,
    )
    op.alter_column(
        "workflow_definitions",
        "definition_schema",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "raw_events",
        "payload_json",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "raw_events",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "rated_usage",
        "items_json",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column(
        "rated_usage", "period_end", existing_type=sa.TEXT(), nullable=False
    )
    op.alter_column(
        "rated_usage", "period_start", existing_type=sa.TEXT(), nullable=False
    )
    op.drop_column("rated_usage", "lago_pushed_at")
    op.alter_column(
        "meter_readings",
        "src_event_ids",
        existing_type=postgresql.ARRAY(sa.BIGINT()),
        server_default=sa.text("'{}'::bigint[]"),
        nullable=False,
    )
    op.alter_column(
        "meter_readings",
        "window_end",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "meter_readings",
        "window_start",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.drop_index(op.f("ix_customers_active"), table_name="customers")
    op.create_unique_constraint(
        op.f("customers_lago_customer_id_key"),
        "customers",
        ["lago_customer_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "customers",
        "status",
        existing_type=sa.VARCHAR(),
        server_default=sa.text("'active'::character varying"),
        existing_nullable=False,
    )
    op.alter_column(
        "customers",
        "currency",
        existing_type=sa.VARCHAR(),
        server_default=sa.text("'EUR'::character varying"),
        existing_nullable=False,
    )
    op.drop_column("customers", "updated_at")
    op.drop_column("customers", "created_at")
    op.drop_column("customers", "active")
    op.alter_column(
        "cost_records",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "audit_log",
        "ts",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("now()"),
        nullable=False,
    )
    op.drop_index(
        op.f("ix_outcome_verifications_workflow_run_id"),
        table_name="outcome_verifications",
    )
    op.drop_table("outcome_verifications")
    # ### end Alembic commands ###
